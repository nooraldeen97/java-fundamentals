/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package basiclibrary;
//import static org.junit.jupiter.api.Assertions.*;
//import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.*;

public class LibraryTest {
    @Test public void testAppHasAGreeting() {
        Library classUnderTest = new Library();
    }

    @Test public void testRoll(){
        int N=4;
        int[] array =new int[N];
        for (int i = 0; i < N; i++) {
          array[i] =  (int) (Math.random() * (6 - 1)) + 1;
        }
        assertEquals("this mothod supposed to generate N numbers from 1 to 6", array.length,Library.rolls(N).length);

    }

    @Test public void testContainsDuplicates(){
        int[] array={1,3,4,5,6};
        boolean cond = false;

        assertEquals("this method should give false if there is no dupicate and true if there is",cond,Library.containsDuplicates(array));
    }


    @Test public void testArraysAvg(){
            int[] OriginalArray={1,3,4,5,6};
            float avg =3.8f;
            float in=Library.arraysAvg(OriginalArray);
        assertEquals("This method should return the average of passed array",avg,in,0.0);

        int emptyArr[]={};
        float epmtyAvg=-1.0f;
        assertEquals("This method should return the average of passed array",epmtyAvg,Library.arraysAvg(emptyArr),0.0);

    }

    @Test public void testMinAvg(){
        int[][] OrginArr = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        int min =51;
        assertEquals("This method caculate the minimum value in 2d array",min,Library.findMin(OrginArr),0.0);
    }
    @Test public void testMaxAvg(){
        int[][] OrginArr = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        int max =72;
        assertEquals("This method caculate the minimum value in 2d array",max,Library.findMAx(OrginArr),0.0);
    }
    
    @Test public void testFindmis(){
        int[][] OrginArr = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };

        int[] resultArr= {63, 67, 68, 69};
        int x=63;
        int y=63;
        for (int i = 0; i < resultArr.length; i++) {
            x=resultArr[i];
            y=resultArr[i];
        }
        assertEquals("This method should show the missing temp value withtin the 2d array",y,Library.findmis(OrginArr,x));
    }

    @Test public void testTally(){
        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String result="Bush";
        assertEquals(Library.tally(votes),result);
    }


   @Test public void testLowestAng(){
       int[][] OrginArr = {
               {66, 64, 58, 65, 71, 57, 60},
               {57, 65, 65, 70, 72, 65, 51},
               {55, 54, 60, 53, 59, 57, 61},
               {65, 56, 55, 52, 55, 62, 57}
       };

       double result =57.0;

        assertEquals("This method should return the minmum avg of 2d array",result,Library.lowestAvg(OrginArr),0.0);
   }

}


