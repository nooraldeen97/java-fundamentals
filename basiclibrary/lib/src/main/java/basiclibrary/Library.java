/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import com.google.common.collect.Sets;

import java.util.*;
import java.util.stream.Collectors;



public class Library {

    public static void main(String[] args) {


        for (int i = 0; i < rolls(4).length; i++) {
            System.out.println(rolls(4)[i]);
        }

        int[] array={1,3,4,5,6};
        System.out.println(containsDuplicates(array));

        System.out.println(arraysAvarege(array));

        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        lowestAvg(weeklyMonthTemperatures);
//        findMinMAx(weeklyMonthTemperatures);
        System.out.println("high:"+" "+ findMAx(weeklyMonthTemperatures));
        System.out.println("low:"+" "+ findMin(weeklyMonthTemperatures));
        for (int i = findMin(weeklyMonthTemperatures); i <=findMAx(weeklyMonthTemperatures) ; i++) {
            findmis(weeklyMonthTemperatures,i);
        }

        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String winner = tally(votes);
        System.out.println(winner + " received the most votes!");
        tally(votes);
    }
    public static String tally(List<String> arr){
    HashMap<String,Integer> maxMap=new HashMap<>();
    String voted="Null";
    int maxVotes=0;
        for (String s : arr) {
         if(maxMap.containsKey(s)){
             maxMap.put(s,maxMap.get(s)+1);
         }
         else
         {
             maxMap.put(s,1);
         }
        }

        for(String s:maxMap.keySet())
        {
            if(maxVotes<=maxMap.get(s))
            {
                maxVotes=maxMap.get(s);
                voted=s;

            }
        }
        return voted;
    }

    public static void findmis(int[][] arr , int value){
        boolean found=false;
        for(int i=0;i<arr.length;i++){
            for (int j = 0; j <arr[i].length ; j++) {
                if(value==arr[i][j])
                {
                    found=true;
                    break;
                }
            }
        }
        if(!found){
            System.out.println("Never saw temperature:"+" "+value);
        }
    }


    public static Integer findMin(int[][]arr){
        HashSet <Integer> allTemp=new HashSet<>();
        for (int i = 0; i < arr.length; i++) {

            for (int j = 0; j < arr[i].length; j++) {
                allTemp.add(arr[i][j]);
//                System.out.println(arr[i][j]);
            }
        }


//        System.out.println("low :"+Collections.min(allTemp));
        return (Collections.min(allTemp));
    }

    public static Integer findMAx(int[][]arr){
        HashSet <Integer> allTemp=new HashSet<>();
        for (int i = 0; i < arr.length; i++) {

            for (int j = 0; j < arr[i].length; j++) {
                allTemp.add(arr[i][j]);
//                System.out.println(arr[i][j]);
            }
        }

//        System.out.println("high :"+));
    return (Collections.max(allTemp));
    }

    public static void lowestAvg(int[][] arr){
        ArrayList<Double> finalArr = new ArrayList<>();
        for (int i = 0; i < arr.length; i++) {
            double sum=0;
            for (int j = 0; j < arr[i].length; j++) {
                sum=sum+arr[i][j];
            }
            finalArr.add(sum/arr[i].length);
        }
//
        System.out.println(Collections.min(finalArr));
    }

    public static float arraysAvarege(int[] array){
        float sum=0;
        for (int i = 0; i <array.length ; i++) {
            sum=sum+array[i];
        }
        return sum/array.length;
    }

    public static boolean containsDuplicates(int[] arr){
        boolean cond;
        Set<Integer> setArr = Arrays.stream(arr).boxed().collect(Collectors.toSet());
        if(setArr.size()==arr.length){
            cond=false;
        }else{
            cond=true;
        }

    return cond;
    }

    public static int[] rolls(int n){
        int[] newArr=new int[n];
        for (int i = 0; i <n ; i++) {
            int r = (int) (Math.random() * (6 - 1)) + 1;
            newArr[i]=r;
//            System.out.println(newArr[i]);
        }
        return newArr;
    }

}
